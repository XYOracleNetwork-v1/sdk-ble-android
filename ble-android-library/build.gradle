apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

group = 'network.xyo'

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        google()
    }
}

configurations {
    localImplementation
}

def majorVersion = 2
def minorVersion = 1

Properties versionProps = new Properties()
def versionPropsFile = file('version.properties')
if (versionPropsFile.exists())
    versionProps.load(new FileInputStream(versionPropsFile))
def code = (versionProps['VERSION_CODE'] ?: "0").toInteger() + 1
def verString = majorVersion + '.' + minorVersion + '.' + code

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    versionProps['VERSION_CODE'] = code.toString()
    versionProps.store(versionPropsFile.newWriter(), null)

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        kotlinOptions {
            allWarningsAsErrors = false
        }
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        defaultPublishConfig 'release'
        versionCode = majorVersion * 100000000 + minorVersion * 1000000 + code
        versionName majorVersion + "." + minorVersion + "." + code
    }

    defaultPublishConfig "release"

    lintOptions {
        htmlReport true
        abortOnError true
        warningsAsErrors false
        lintConfig file('lint.xml')
    }

    sourceSets {
        main {
            assets {
                srcDir 'assets'
            }
            java {
                srcDirs += 'src/main/kotlin'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }

    packagingOptions {
        exclude 'META-INF/build.kotlin_module'
        exclude 'META-INF/atomicfu.kotlin_module'
    }
}

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/ble-android-library-release.aar")
            groupId 'network.xyo'
            artifactId 'sdk-ble-android'
            version verString

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                //def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    dryRun = false
    override = false
    publish = true
    pkg {
        repo = 'xyo'
        name = 'sdk-ble-android'
        userOrg = 'xyoraclenetwork'
        licenses = ['LGPL-3.0']
        desc = 'Android Base Classes'
        vcsUrl = 'https://github.com/xyoraclenetwork/sdk-ble-android.git'

        version {
            name = verString
            vcsTag = verString
        }
    }
    publications = ['Production']
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.50'
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.1'
    api 'org.jetbrains.kotlin:kotlin-reflect:1.3.50'
    api 'network.xyo:sdk-base-android:2.0.91'
    api 'org.jetbrains:annotations:17.0.0'
    implementation 'com.github.kotlin-graphics:kotlin-unsigned:3.2.0'
}

//allows experimentals we are using - ignore in lint
tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).all { task ->
    task.kotlinOptions.freeCompilerArgs += experimentalsEnabled
}